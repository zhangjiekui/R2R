
# [database]
# Postgres Configuration
# R2R_POSTGRES_USER="langchain"
# R2R_POSTGRES_PASSWORD="langchain"
# R2R_POSTGRES_HOST="10.1.150.105"
# R2R_POSTGRES_PORT=7000
# R2R_POSTGRES_DBNAME="postgres"
# R2R_POSTGRES_MAX_CONNECTIONS=1024
# R2R_POSTGRES_STATEMENT_CACHE_SIZE=100

# provider = "postgres"
# user = "langchain"
# password = "langchain"
# host = "10.1.150.105"
# port = 7000
# db_name = "postgres"
# project_name = "r2rproject"
# default_collection_name = "R2RDefaultClection"

[app]
# app settings are global available like `r2r_config.agent.app`
project_name = "r2r_default_365_local" # optional, can also set with `R2R_PROJECT_NAME` env var
default_max_documents_per_user = 10_000
default_max_chunks_per_user = 10_000_000
default_max_collections_per_user = 5_000


# Set the default max upload size to 200 GB for local testing
default_max_upload_size = 214748364800

# LLM used for internal operations, like deriving conversation names
fast_llm = "openai/qwen3"

# LLM used for user-facing output, like RAG replies
quality_llm = "openai/qwen3"

# LLM used for ingesting visual inputs
vlm = "openai/qwenvl"
# LLM used for transcription
audio_lm = "openai/whisper-1"

# Reasoning model, used for `research` agent
reasoning_llm = "openai/qwen3"
# Planning model, used for `research` agent
planning_llm = "openai/qwen3"


[agent]
rag_agent_static_prompt = "static_rag_agent"
rag_agent_dynamic_prompt = "dynamic_rag_agent"
# The following tools are available to the `rag` agent
rag_tools = ["search_file_descriptions", "search_file_knowledge", "get_file_content","tavily_search",
    "tavily_extract"] # can add  "web_search" | "web_scrape"
# The following tools are available to the `research` agent
research_tools = ["rag", "reasoning", "critique", "python_executor"]


[auth]
provider = "r2r"
access_token_lifetime_in_minutes = 60000
refresh_token_lifetime_in_days = 7
require_authentication = false
require_email_verification = false
default_admin_email = "470137285@qq.com"
default_admin_password = "470137285"



[crypto]
provider = "bcrypt"

[database]
default_collection_name = "Default"
default_collection_description = "Your default collection."
collection_summary_prompt = "collection_summary"

  [database.graph_creation_settings]
    graph_entity_description_prompt = "graph_entity_description"
    graph_extraction_prompt = "graph_extraction"
    entity_types = [] # if empty, all entities are extracted
    relation_types = [] # if empty, all relations are extracted
    automatic_deduplication = true # enable automatic deduplication of entities

  [database.graph_enrichment_settings]
    graph_communities_prompt = "graph_communities"

[embedding]
provider = "xinference"
api_base = 'http://10.1.150.106:9997/v1'
base_model = "bce-embedding-base_v1"
base_dimension = 768
rerank_model = "jina-reranker-v2" # reranking model
rerank_url='http://10.1.150.106:9997/v1/rerank'
batch_size = 32
add_title_as_prefix = true
concurrent_request_limit = 256
quantization_settings = { quantization_type = "FP32" }

[completion_embedding]
# Generally this should be the same as the embedding config, but advanced users may want to run with a different provider to reduce latency
provider = "xinference"
api_base = 'http://10.1.150.106:9997/v1'
base_model = "bce-embedding-base_v1"
base_dimension = 768
batch_size = 32
add_title_as_prefix = false
concurrent_request_limit = 256

[completion]
provider = "litellm"
concurrent_request_limit = 64
  [completion.generation_config]
    model = "openai/default"
    concurrent_request_limit = 32
    api_base = 'http://10.1.150.105:3000/v1'
    temperature = 0.1
    top_p = 0.8
    max_tokens_to_sample = 4_096
    stream = false
    add_generation_kwargs = { }

[ingestion]
provider = "r2r"
strategy = "auto"
document_summary_model = "openai/default"
vision_img_model = "openai/qwenvl"
vision_pdf_model = "openai/qwenvl"
chunking_strategy = "recursive"
chunk_size = 512
chunk_overlap = 100
excluded_parsers = ["mp4"]
skip_document_summary = true
automatic_extraction = true # enable automatic extraction of entities and relations
  [ingestion.chunk_enrichment_settings]
    chunk_enrichment_prompt = "chunk_enrichment"
    enable_chunk_enrichment = false    
    n_chunks = 2
  [ingestion.extra_parsers]
    pdf = "zerox"

[logging]
provider = "r2r"
log_table = "logs"
log_info_table = "log_info"

[orchestration]
provider = "simple"
# 下面的配置会出错：details = "DNS resolution failed for hatchet-engine:7077: C-ares status is not ARES_SUCCESS qtype=AAAA name=hatchet-engine is_balancer=0: Domain name not found"
# provider = "hatchet" 
server_url = "http://10.1.150.105:7274"
host_port =  "localhost:7274"

[email]
provider = "console_mock" # `smtp` | `sendgrid` supported

